---
# ============================================
# Playbook 1: Configurar VM de Nginx
# ============================================
- name: Configurar VM Nginx (AplicaciÃ³n Web)
  hosts: nginx
  become: true
  
  tasks:
    - name: Actualizar cache de paquetes APT
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Instalar Docker y dependencias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Crear directorio para keyring de Docker
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Agregar clave GPG de Docker
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Agregar repositorio de Docker
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Actualizar cache despuÃ©s de agregar repo Docker
      apt:
        update_cache: yes

    - name: Instalar Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: AÃ±adir usuario al grupo docker
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Habilitar y arrancar servicio Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Instalar Nginx
      apt:
        name: nginx
        state: present

    - name: Iniciar servicio Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Cambiar propietario de /var/www/html
      file:
        path: /var/www/html
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes

    - name: Crear pÃ¡gina de bienvenida personalizada
      copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head>
              <title>DevOps Pipeline - VM Nginx</title>
              <style>
                  body { font-family: Arial; text-align: center; padding: 50px; background: #f0f0f0; }
                  h1 { color: #009639; }
                  .status { background: white; padding: 20px; border-radius: 10px; margin: 20px auto; max-width: 600px; }
              </style>
          </head>
          <body>
              <h1>ðŸš€ VM Nginx Configurada Exitosamente</h1>
              <div class="status">
                  <h2>âœ… Servicios Instalados:</h2>
                  <p>âœ“ Docker Engine</p>
                  <p>âœ“ Docker Compose Plugin</p>
                  <p>âœ“ Nginx Web Server</p>
                  <p><strong>Estado:</strong> Operacional</p>
              </div>
          </body>
          </html>
        dest: /var/www/html/index.html
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

# ============================================
# Playbook 2: Configurar VM de Jenkins (CI/CD)
# ============================================
- name: Configurar VM Jenkins (CI/CD + SonarQube)
  hosts: jenkins
  become: true
  
  tasks:
    - name: Actualizar cache de paquetes APT
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Instalar dependencias necesarias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present

    - name: Crear directorio para keyring de Docker
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Agregar clave GPG de Docker
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Agregar repositorio de Docker
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Actualizar cache despuÃ©s de agregar repo Docker
      apt:
        update_cache: yes

    - name: Instalar Docker Engine y Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: AÃ±adir usuario al grupo docker
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Habilitar y arrancar servicio Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Configurar vm.max_map_count para SonarQube
      sysctl:
        name: vm.max_map_count
        value: "262144"
        state: present
        reload: yes

    - name: Configurar fs.file-max para SonarQube
      sysctl:
        name: fs.file-max
        value: "65536"
        state: present
        reload: yes

    - name: Crear directorio para docker-compose
      file:
        path: /home/{{ ansible_user }}/devops
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copiar docker-compose.yml
      copy:
        src: docker-compose.yml
        dest: /home/{{ ansible_user }}/devops/docker-compose.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Detener contenedores existentes (si existen)
      shell: docker compose down
      args:
        chdir: /home/{{ ansible_user }}/devops
      ignore_errors: yes

    - name: Reiniciar Docker daemon
      systemd:
        name: docker
        state: restarted

    - name: Esperar a que Docker estÃ© listo
      pause:
        seconds: 5

    - name: Levantar servicios con Docker Compose (como root)
      shell: docker compose up -d
      args:
        chdir: /home/{{ ansible_user }}/devops
      become: yes
      become_user: root

    - name: Esperar a que Jenkins estÃ© disponible
      wait_for:
        port: 8080
        delay: 10
        timeout: 300

    - name: Esperar a que SonarQube estÃ© disponible
      wait_for:
        port: 9000
        delay: 10
        timeout: 300

    - name: Mostrar mensaje de Ã©xito
      debug:
        msg:
          - "=========================================="
          - "âœ… CONFIGURACIÃ“N COMPLETADA EXITOSAMENTE"
          - "=========================================="
          - "Jenkins: http://130.131.233.231:8080"
          - "SonarQube: http://130.131.233.231:9000"
          - "PostgreSQL: 130.131.233.231:5432"
          - ""
          - "Credenciales SonarQube por defecto:"
          - "  Usuario: admin"
          - "  Password: admin"
          - ""
          - "Para obtener password de Jenkins:"
          - "  ssh adminuser@130.131.233.231"
          - "  docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword"
          - "=========================================="
      become_method: su
      notify: restart jenkins

  handlers:
    - name: restart jenkins
      command: sudo docker restart jenkins
      become_user: "{{ ansible_user }}"
      become_method: su