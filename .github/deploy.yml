name: Deploy con Ansible a Azure VMs

on:
  # Ejecutar manualmente desde GitHub
  workflow_dispatch:
    inputs:
      target:
        description: 'VM a configurar (all, jenkins, nginx)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - jenkins
          - nginx
  
  # Ejecutar automáticamente en push a main
  push:
    branches:
      - main
    paths:
      - 'playbook.yml'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'

env:
  ANSIBLE_HOST_KEY_CHECKING: 'False'
  ANSIBLE_FORCE_COLOR: 'True'

jobs:
  deploy:
    name: Configurar VMs con Ansible
    runs-on: ubuntu-latest
    
    steps:
      # ============================================
      # 1. Checkout del código
      # ============================================
      - name: Checkout código
        uses: actions/checkout@v4

      # ============================================
      # 2. Configurar Python y Ansible
      # ============================================
      - name: Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Instalar Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          ansible --version

      # ============================================
      # 3. Crear inventory dinámico con las IPs
      # ============================================
      - name: Crear inventory.ini
        run: |
          cat > inventory.ini << 'EOF'
          [jenkins]
          ${{ secrets.JENKINS_VM_IP }} ansible_user=${{ secrets.VM_USER }} ansible_ssh_pass=${{ secrets.VM_PASSWORD }}

          [nginx]
          ${{ secrets.NGINX_VM_IP }} ansible_user=${{ secrets.VM_USER }} ansible_ssh_pass=${{ secrets.VM_PASSWORD }}

          [all:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF
          
          echo "Inventory creado"
          cat inventory.ini

      # ============================================
      # 4. Test de conectividad
      # ============================================
      - name: Verificar conectividad SSH
        run: |
          echo "Probando conexión a las VMs..."
          ansible all -i inventory.ini -m ping

      # ============================================
      # 5. Ejecutar playbook de Ansible
      # ============================================
      - name: Ejecutar Ansible Playbook
        run: |
          if [ "${{ github.event.inputs.target }}" == "" ] || [ "${{ github.event.inputs.target }}" == "all" ]; then
            echo "Configurando TODAS las VMs..."
            ansible-playbook -i inventory.ini playbook.yml
          else
            echo "Configurando solo VM: ${{ github.event.inputs.target }}"
            ansible-playbook -i inventory.ini playbook.yml --limit ${{ github.event.inputs.target }}
          fi

      # ============================================
      # 6. Verificar servicios
      # ============================================
      - name: Verificar servicios desplegados
        run: |
          echo "=================================="
          echo "DESPLIEGUE COMPLETADO"
          echo "=================================="
          echo ""
          echo "Jenkins: http://${{ secrets.JENKINS_VM_IP }}:8080"
          echo "SonarQube: http://${{ secrets.JENKINS_VM_IP }}:9000"
          echo "Nginx: http://${{ secrets.NGINX_VM_IP }}"
          echo ""
          echo "Para obtener password de Jenkins:"
          echo "  ssh ${{ secrets.VM_USER }}@${{ secrets.JENKINS_VM_IP }}"
          echo "  docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword"
          echo "=================================="

      # ============================================
      # 7. Notificar en caso de error
      # ============================================
      - name: Notificar fallo
        if: failure()
        run: |
          echo "=================================="
          echo " EL DESPLIEGUE FALLÓ"
          echo "=================================="
          echo "Revisa los logs arriba para ver el error"
          echo "=================================="